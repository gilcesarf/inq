/**
 * Copyright (C) 2011 Inqwell Ltd
 *
 * You may distribute under the terms of the Artistic License, as specified in
 * the README file.
 */

/*
 * $Archive: /src/com/inqwell/any/io/NativeStream.java $
 * $Author: sanderst $
 * $Revision: 1.2 $
 * $Date: 2011-04-07 22:18:22 $
 */
 
package com.inqwell.any.io;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;

/**
 * A Reader that accepts an underlying source and echoes lines as they are
 * read.
 * <note>Because of buffering it is unlikely that the output generated by this
 * class will correctly intersperse with application output.</note>
 * @author Tom
 *
 */
public class EchoReader extends Reader
{
  private BufferedReader r_;
  private char[]         buf_;
  private int            off_;
  private int            len_;

  static private char[] lineSeparator__;
  
  static
  {
    String s = System.getProperties().getProperty("line.separator");
  	lineSeparator__ = new char[s.length()];
  	s.getChars(0,
				       s.length(),
				       lineSeparator__,
				       0);

  }
  
  public EchoReader(Reader in)
  {
  	r_ = new BufferedReader(in);
  }
  
  public EchoReader(BufferedReader in)
  {
  	r_ = in;
  }
  
	public void close() throws IOException
	{
		r_.close();
	}

	public void mark(int readAheadLimit) throws IOException
	{
		r_.mark(readAheadLimit);
	}
	
	public boolean markSupported()
	{
		return r_.markSupported();
	}
	
	public boolean ready() throws IOException
	{
		return r_.ready();
	}
	
	public void reset() throws IOException
	{
		r_.reset();
	}
	
	public long skip(long n) throws IOException
	{
		return r_.skip(n);
	}
	
	public int read(char[] cbuf, int off, int len) throws IOException
	{
		int c = 0;
	  while(len > 0)
	  {
	  	while(off_ < len_)
	  	{
	  		cbuf[off++] = buf_[off_++];
	  		len--;
	  		c++;
	  	}
	  	if (len > 0)
	  	{
	  		fillBuffer();
	  		if (buf_ == null)
	  		{
	  			// eof reached
	  			return c > 0 ? c : -1;
	  		}
	  	}
	  }
		return c;
	}

	private void fillBuffer() throws IOException
	{
		String s = r_.readLine();
		if (s == null)
		{
			buf_ = null;
			return;
		}
		
		System.out.println(s);
		
		int len;
  	char[] c = new char[(len = s.length()) + lineSeparator__.length];
  	s.getChars(0,
				       s.length(),
				       c,
				       0);
  	
  	for (int i = 0; i < lineSeparator__.length; i++)
  	  c[len++] = lineSeparator__[i];
  
  	buf_ = c;
  	off_ = 0;
  	len_ = c.length;
	}
}
