/**
 * Copyright (C) 2016 Inqwell Ltd
 *
 * You may distribute under the terms of the Artistic License, as specified in
 * the README file.
 */

/**
 * Test Framework Support
 *
 */

package inq.test;

function record(any results, any test, any root, any base)
{
  any p = call resultsPath(test, root);
  
  ioXMLX x;
  x.properties.formatOutput  = true;
  x.properties.inqAttributes = true;
  x.properties.groupingUsed  = false;

// This will affect the formatting used in recorded XML, should we wish to do that
//  if ($process.test.formatters)
//    x.properties.formatters = $process.test.formatters;

  // Make the path where the results will go. It is relative
  // to this script as "./results/<p>"
  file resf = absurl(p, base);
  
  // Make sure the parent directory is present
  file dir  = resf.properties.parentPath;
  mkdirs(dir);

  open(x, resf, OPEN_WRITE);
  writestream(x, results);
 
  close(x);
}

function retrieve(any test, any root, any base)
{
  any p = call resultsPath(test, root);
  
  ioXMLX x;
  object cp = path($this*child);
  any tagFuncs.{cp} = cfunc f = call childTag();
  x.properties.tagFuncs = tagFuncs;
  x.properties.seed     = omap m;

  // Make the path where the results will go. It is relative
  // to this script as "./results/<p>"
  file resf = absurl(p, base);
  
  if (!open(x, resf, OPEN_READ))
    throw(renderf("No results found at {0}", p));
  
  any expected = readstream(x);
  close(x);
  
  //writeln($catalog.system.out, "\e \l");
  //writeln($catalog.system.out, expected);
  
  expected;
}

local function childTag(any node,
                        any parent,
                        any nodeName,
                        any ordinal,
                        any content,
                        any last,    // always false - SAX parser does not know
                        any descend,
                        any attributes)
{
  nodeName + ordinal;
}

local function resultsPath(any test, any root, string ext = ".xml")
{
  // evaluate the results file name
  if (!root)
    any root = $process.test.name;
    
  any p = "results" + $properties.file_separator + root;
  if (test)
    p += $properties.file_separator + test;
  
  p += ext;
}

function storeCSV(any results, any test, any root, any base)
{
  any p = call resultsPath(test, root, ext=".csv");
  
  ioCSV c;
  c.properties.scanNodeSets = true;

  // Make the path where the results will go. It is relative
  // to this script as "./results/<p>"
  file resf = absurl(p, base);
  
  // Make sure the parent directory is present
  file dir  = resf.properties.parentPath;
  mkdirs(dir);

  open(c, resf, OPEN_WRITE);
  writestream(c, results);
  close(c);
}

function adjustPrecision(any t, any atPath)
{
  // Possibly adjust the precision of the given value (typically
  // a value under test) so that it is suitable for comparison
  // with any expected (meaning "real world") value.
  // Often, values held within the system are at greater precision
  // than their real world representation (rates, dates) and
  // are reduced when externalised.

  // See if we have any formatters. This is what defines any reduction
  if ($process.test.formatters)
  {
    // See if there is a formatter for the given path. If found
    // use it to flatten the value under test to whatever that format is.
    any f = $process.test.formatters.{atPath};
    if (f)
    {
      any t1 = clone(t);
      any ff = format(f, t);
      parse(render(t, format=ff), ff, t1);
      any t = t1;
    }
  }
  
  // Returns
  t;
}

function compareSingle(any test, any expected, any paths)
{
  // Compare the value under test with its expected value by
  // checking only those fields indicated by paths. Typically
  // the paths will not include fields that alter between test
  // runs, like IDs and LastUpdated fields.
  
  // Not equal then throw
  foreach(paths)
  {
    any t = test.{$loop};  // Value under test
    any e = expected.{$loop};  // Expected value
 
    any t = call adjustPrecision(t, atPath = object p = path($this.{$loop}));
 
    if (t != e)
      throw(renderf("Expected {0} got {1} for field {2}\ntest {3}\nexpected {4}",
                    e, t, $loop, test, expected));
  }
}

function compareNodeSets(any results, any expected, any paths)
{
  // Compare two node sets, checking they have the same number of children
  // and that the specified fields are equal for all of them. 
  any ct = count(results);
  any ce = count(expected);

  if (ct != ce)
    throw(renderf("Node set count expected {0} but have {1}", ce, ct));
  
  foreach(results)
  {
    any c = @count;
    any n = $loop;
    foreach(paths)
    {
      any t = n.{$loop};  // Value under test
      any e = expected[c].{$loop};  // Expected value
      
      any t = call adjustPrecision(t, atPath = object p = path($this.{$loop}));
 
      if (t != e)
        throw(renderf("Expected {0} got {1} for field {2} ordinal {3}\nnode {4}\nexpected {5}",
                      e, t, $loop, c, n, expected[c]));
    }
  }
}

function runTests (any tests, any base)
{
  int success = 0;
  int fail    = 0;
  
  boolean record = if ($catalog.argsMap.record) true; else false;;
  any $process.test.csv = if ($catalog.argsMap.csv) true; else false;;
  
  any durationFmt = format("HH:mm:ss@zone='GMT'@", any ss = getdate());
  
  writeln ($catalog.system.out, "");
  if (record)
  {
    writeln ($catalog.system.out, "Recording...");
    writeln ($catalog.system.out, "");
  }

  foreach(tests)
  {
    any test = exec($loop, base);
    
    int test.success=0;
  
    try
    {
      writeln ($catalog.system.out, renderf("{0} tests {1}", (record ? "Recording" : "Running"), test.name));
      writeln ($catalog.system.out, "");
      
      xfunc(test.funcs.setup, name = test.name, record);
      
      foreach(test.funcs.tests)
      {
        any ts = getdate();
        writeln ($catalog.system.out, ts);
        writeln ($catalog.system.out, renderf("{0} test {1}", (record ? "Recording" : "Running"), $loop));
        try
        {
          any results = xfunc($loop); // No use for results in here yet

          date td = getdate() - ts;
          writeln($catalog.system.out, renderf("Duration: {0}", render(td, format=durationFmt)));

          test.success++;
          success++;
        }
        catch
        {
          writeln($catalog.system.err, renderf("Test {0} failed", $loop));
          writeln($catalog.system.err, @exmsg);
          writeln($catalog.system.err, @stackTrace);
          fail++;
        }
        writeln ($catalog.system.out, "");
      }
      writeln ($catalog.system.out, renderf("{0}: {1} out of {2} tests {3}",
                                            test.name,
                                            test.success,
                                            count(test.funcs.tests),
                                            (record ? "recorded" : "successful")));
    }
    catch
    {
      writeln($catalog.system.err, renderf("Test {0} setup failed", $process.test.name));
      writeln($catalog.system.err, @exmsg);
      writeln($catalog.system.err, @stackTrace);
    }
    writeln ($catalog.system.out, "");
  }
  
  writeln ($catalog.system.out, renderf("Total {0}: {1}", (record ? "recorded" : "successful"), success));
  writeln ($catalog.system.out, "Failed: " + fail);
  date sd = getdate() - ss;
  writeln($catalog.system.out, renderf("Total time: {0}", render(sd, format=durationFmt)));
  
  if (fail)
    exit(1);
  else
    exit(0);
}
