#! /bin/inq -shebang

/**
 * Copyright (C) 2016 Inqwell Ltd
 *
 * You may distribute under the terms of the Artistic License, as specified in
 * the README file.
 */

// Inq encryption and decryption tool. Uses the prevailing Inq
// security properties to en/decrypt a set of files.

exec("classpath:///com/inqwell/any/tools/util.inq");


local function usage()
{
  writeln($catalog.system.err, "usage: \i:");
  writeln($catalog.system.err, "  -encrypt | -decrypt");
  writeln($catalog.system.err, "  -file <file ...>");
  writeln($catalog.system.err, "  [-q]");
  writeln($catalog.system.err, "  [-out <directory>]");
  exit(1);
}

// Must be one of enc or dec
if (($catalog.argsMap.encrypt && $catalog.argsMap.decrypt)
    || (!$catalog.argsMap.encrypt && !$catalog.argsMap.decrypt))
  call usage();

// Must supply -file command line argument:
// what we're de/encrypting
if (!$catalog.argsMap.file)
  call usage();

// -out is optional. If supplied the directory where the output
// files will be written. If not, overwrite input with output.
// Either way modification times are preserved.
if ($catalog.argsMap.out)
  file outdir = $catalog.argsMap.out;

any infiles = $catalog.argsMap.arrays.file;
if (!infiles)
{
  writeln($catalog.system.err, "No input files specified");
  exit(1);
}

// Check outdir exists and is a directory
if (outdir && (!outdir.properties.exists || !outdir.properties.directory))
{
  writeln($catalog.system.err, outdir + "does not exist or not a directory");
  exit(1);
}

boolean $this.verbose = ($catalog.argsMap.q ? false : true);

local function encrypt(any infiles, any outdir)
{
  // Streams for the files. We're assuming text
  ioPrint i;
  ioPrint o;
  
  // Working file
  file ifile;
  
  foreach(infiles)
  {
    ifile = $loop;
    
    any outto = (outdir ? outdir : ifile.properties.parentFile);
    
    file outfilef = absurl(ifile.properties.name, outto);

    if (ifile.properties.absolutePath == outfilef.properties.absolutePath)
    {
      file backTo = outfilef;
      any outfilef = createtmpfile("crypt", ".tmp");
    }

    // Open the inputs
    if (!open(i, ifile, OPEN_READ))
    {
      writeln($catalog.system.err, "Can't open " + ifile);
      continue;
    }
  
    any lastMod = ifile.properties.lastModified;
    
    // We can't make files of protocol "gile:", only file: is
    // allowed there, but we can open URLs (which are only strings)
    // with open()
    any outfile = "gile:" + outfilef.properties.path;
    
    if ($this.verbose)
      writeln($catalog.system.out, (backTo ? backTo : outfilef));
  
    // Open the output stream and write the input to it
    open(o, outfile, OPEN_WRITE);
    while(!isnull(any a = readstream(i)))
      writeln(o, a);
   
    close(i);
    close(o);

    if (backTo)
    {
      call inq.util:copyFile(from = outfilef, to = backTo);
      deletefile(outfile);
      outfilef = backTo;
    }
    
    // Preserve mod time
    outfilef.properties.lastModified = lastMod;
  }
}

local function decrypt(any infiles, any outdir)
{
  // Streams for the files. We're assuming text
  ioPrint i;
  ioPrint o;
  
  // Working file
  file ifilef;
  
  foreach(infiles)
  {
    ifilef = $loop;
    
    // We can't make files of protocol "gile:", only file: is
    // allowed there, but we can open URLs (which are only strings)
    // with open()
    any infile = "gile:" + ifilef.properties.path;

    any outto = (outdir ? outdir : ifilef.properties.parentFile);
    
    file outfile = absurl(ifilef.properties.name, outto);

    if (ifilef.properties.absolutePath == outfile.properties.absolutePath)
    {
      file backTo = outfile;
      any outfile = createtmpfile("crypt", ".tmp");
    }

    // Open the inputs
    if (!open(i, infile, OPEN_READ))
    {
      writeln($catalog.system.err, "Can't open " + ifile);
      continue;
    }

    any lastMod = ifilef.properties.lastModified;

    if ($this.verbose)
      writeln($catalog.system.out, (backTo ? backTo : outfile));
  
    // Open the output stream and write the input to it
    open(o, outfile, OPEN_WRITE);
    while(!isnull(any a = readstream(i)))
      writeln(o, a);
   
    close(i);
    close(o);
    
    if (backTo)
    {
      call inq.util:copyFile(from = outfile, to = backTo);
      deletefile(outfile);
      outfile = backTo;
    }
    
    // Preserve mod time
    outfile.properties.lastModified = lastMod;
  }
}

if ($catalog.argsMap.encrypt)
  call encrypt(infiles, outdir);
else
  call decrypt(infiles, outdir);
  
exit(0);
