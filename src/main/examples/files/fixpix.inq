#! /bin/inq -shebang

/**
 * Copyright (C) 2011 Inqwell Ltd
 *
 * You may distribute under the terms of the Artistic License, as specified in
 * the README file.
 */

// The story is this: back from a student trip to Beijing my
// son puts the memory card into a rather cheap PC
// and.... it gets corrupted. Some scavenging software
// is found but that rips the thumbnails and full-size
// images separately. A short Inq script later....




// Concatenate thumbnail headers to megapixel bodies of
// images restored from a corrupted memory card.
// Long live the panda.

// The cwd (where the files are). Note you don't have to use
// absurl() - it is being used here to base the input files
// against the location of this script. This makes it
// easier to run the script from some other cwd, as is the
// case when running from within JUnit under eclipse or
// from maven. So this is just really to help with regression
file headers = absurl(".");
file images  = absurl(".");

// Headers are odd numbered files, bodies even. Set up two filters.
// The files are called "image_nnnn.JPG"
// The Inq filefilter type uses a regex to determine whether
// the file is eligible. A scripted function is also possible.
filefilter headerF = "image.*[13579]\\.JPG";
filefilter imageF  = "image.*[02468]\\.JPG";

// Rule out directories. Default is true.
headerF.properties.acceptDirs =
  imageF.properties.acceptDirs = false;

// Put the filters into the files representing the source directory
headers.properties.fileFilter = headerF;
images.properties.fileFilter = imageF;

// When the fileFilter property has been set, the listFiles
// property uses it to filter the result.
// Get the filtered lists of the files out. These are arrays (of course)
any headerFiles = headers.properties.listFiles;
any imageFiles  = images.properties.listFiles;

writeln($catalog.system.out, headerFiles);
writeln($catalog.system.out, imageFiles);

// Make sure the names are in order, or we're really stuffed
sort(headerFiles, $loop.properties.name);
sort(imageFiles, $loop.properties.name);

// Streams for the header, image and output
ioByte h;
ioByte i;
ioByte o;

array outfiles;

// Iterate over the header list (doesn't matter which)
foreach(headerFiles)
{
  writeln($catalog.system.out, "Header file is " + $loop);
  writeln($catalog.system.out, "Image file is " + imageFiles[@count]);

  // Open the inputs
  open(h, $loop, OPEN_READ);
  open(i, imageFiles[@count], OPEN_READ);

  // Make the output file name - it is the header file name written
  // to the system temporary directory.
  // 1) Assign the temporary directory property to a file type. These are
  // interchangable with URLs.
  file f = $properties.java_io_tmpdir;
  // 2) Base the header file's name on the temporary directory to make
  // an absolute URL there.
  any outfile = absurl($loop.properties.name, f);
  writeln($catalog.system.out, "Output file is " + outfile);

  // Open the output stream and write the inputs to it
  open(o, outfile, OPEN_WRITE);
  while(any a = readstream(h))
    writestream(o, a);
  while(any a = readstream(i))
    writestream(o, a);

  close(h);
  close(i);
  close(o);
  
  // Result for JUnit usage - an array of files
  outfiles + (file f = outfile);

  writeln($catalog.system.out, "");
}

// Return for JUnit
outfiles;
