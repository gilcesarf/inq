/**
 * Copyright (C) 2011 Inqwell Ltd
 *
 * You may distribute under the terms of the Artistic License, as specified in
 * the README file.
 */


/**
 * A BackChat instance represents a message in a ChatChannel. It is
 * called BackChat because a number of instances are retained to show
 * old messages when a user joins a channel.
 *
 * Copyright Inqwell Ltd 2002-2008 All Rights Reserved
 */

package examples.chat;

typedef BackChat
{
  fields
  (
    int     BackChat = 1; // Manufactured primary key
    ChatChannel;          // The ChatChannel primary key
    string  MsgText;
    string  MsgFrom;
    date    MsgTime;
  )

  construct(
    {
      // Assume ChatChannel is on the stack. We shouldn't be constructing
      // these when the channel's BackChat count is zero
      if (ChatChannel.BackChatCount <= 0)
        throw("No BackChat required");

      $this.ChatChannel = ChatChannel.ChatChannel;

      // We set the primary key field $this.BackChat below. If two
      // users collide at this point then one would incur an exception
      // and his message not sent. To guard against this, take out an
      // explicit lock. We can lock anything so we'll choose the
      // fully qualified name of this typedef as the lock item. The
      // lock is automatically released when the enclosing transaction
      // is committed.
      lock(fqname($this));

      // Check if we need to delete oldest BackChat instance for
      // this channel to cap the maximum number kept
      omap om;  // Ordered map for sorting/vectored access
      any bck = new(BackChat.ByChatChannel, $this);
      read(BackChat, bck, setname="byChannel", target=om);
      if (count(om.byChannel) > ChatChannel.BackChatCount)
      {
        // Sort messages, oldest first
        sort(om.byChannel, $loop.BackChat.MsgTime);

        // Delete the oldest
        delete(om.byChannel[0].BackChat);

        // Set the BackChat field to the newest + 1
        $this.BackChat = om.byChannel[last].BackChat.BackChat + 1;
      }
      else
      {
        if (count(om.byChannel) > 0)
          $this.BackChat = om.byChannel[last].BackChat.BackChat + 1;
        else
          $this.BackChat = 1;
      }
    }
  )

  pkey
  (
    fields(BackChat, ChatChannel)
  )

  key ByChatChannel
  (
    fields(ChatChannel)
  )

}

